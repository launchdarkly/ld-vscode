{
	"name": "launchdarkly",
	"displayName": "LaunchDarkly",
	"description": "Manage LaunchDarkly feature flags directly from within your code",
	"version": "4.99.53",
	"publisher": "launchdarklyofficial",
	"engines": {
		"vscode": "^1.82.0"
	},
	"repository": "https://github.com/launchdarkly/ld-vscode",
	"categories": [
		"Other"
	],
	"icon": "images/launchdarkly.png",
	"license": "SEE LICENSE IN LICENSE.txt",
	"activationEvents": [
		"onStartupFinished"
	],
	"main": "./dist/extension",
	"contributes": {
		"icons":{
			"launchdarkly-logo": {
				"description": "launchdarkly-logo icon",
				"default": {
					"fontPath": "dist/glicons.woff2",
					"fontCharacter": "\\f22d"
				}
			}
		},
		"walkthroughs": [
			{
				"id": "extsetup",
				"title": "LaunchDarkly Extension Walkthrough",
				"description": "A LaunchDarkly setup extension walkthrough",
				"steps": [
					{
						"id": "signign",
						"title": "Sign In to LaunchDarkly with VSCode",
						"description": "For this you will need an API token.\n[Sign In](command:vscode-launchdarkly-authprovider.signIn)",
						"media": {
							"markdown": "media/signin.md"
						},
						"completionEvents": [
							"onCommand:vscode-launchdarkly-authprovider.signIn"
						]
					},
					{
						"id": "configuresetting",
						"title": "Configure Settings",
						"description": "This step will have you setup your LaunchDarkly Project and Environment\n[Configure Settings](command:extension.configureLaunchDarkly)",
						"media": {
							"markdown": "media/configuresettings.md"
						},
						"completionEvents": [
							"onCommand:extension.configureLaunchDarkly"
						]
					},
					{
						"id": "flagactions",
						"title": "Flag Actions Command",
						"description": "This step will have you run the Flag Actions command to see what is available.\n[Open Flag Actions](command:launchdarkly.quickFlag)",
						"media": {
							"markdown": "media/flagactions.md"
						},
						"completionEvents": [
							"onCommand:launchdarkly.quickFlag"
						]
					},
					{
						"id": "learnldwindow",
						"title": "Learn about the LaunchDarkly view",
						"description": "Understand the information in the LaunchDarkly view. [Click to view](command:launchdarklyFeatureFlags.focus)",
						"media": {
							"image": "media/extension-view.png",
							"altText": "LaunchDarkly View including, Flags in File, Quick Links, and Flag List"
						},
						"completionEvents": [
							"onCommand:launchdarklyFeatureFlags.focus"
						]
					},
					{
						"id": "createflag",
						"title": "Create a boolean flag",
						"description": "This step will have create a boolean flag in your configured Project.\n[Create Flag](command:launchdarkly.createFlag)",
						"media": {
							"image": "media/create-boolean-flag.gif",
							"altText": "Create Boolean Flag Example"
						},
						"completionEvents": [
							"onCommand:launchdarkly.createFlag"
						]
					},
					{
						"id": "advancedusage",
						"title": "Advanced Examples",
						"description": "",
						"media": {
							"markdown": "media/advanced.md"
						},
						"completionEvents": []
					}
				]
			}
		],
		"configuration": {
			"type": "object",
			"title": "LaunchDarkly",
			"properties": {
				"launchdarkly.baseUri": {
					"type": "string",
					"default": "",
					"description": "LaunchDarkly base URI. This is only used with 'Enable Legacy Auth' configuration."
				},
				"launchdarkly.globalDefault": {
					"type": "string",
					"default": "off",
					"enum": [
						"off",
						"use global defaults (no autoload)",
						"use global defaults (autoload)"
					],
					"description": "Experimental(not supported): LaunchDarkly use global Defaults"
				},
				"launchdarkly.enableHover": {
					"type": "boolean",
					"default": true,
					"description": "Enables flag info to be displayed on hover of a valid flag key"
				},
				"launchdarkly.enableAutocomplete": {
					"type": "boolean",
					"default": true,
					"description": "Enable flag key autocompletion"
				},
				"launchdarkly.enableFlagExplorer": {
					"type": "boolean",
					"default": true,
					"description": "Enable feature flag explorer in your sidebar"
				},
				"launchdarkly.refreshRate.flags": {
					"type": "number",
					"default": 120,
					"description": "How often in minutes to refresh feature flag metadata via API. If `0` global flag metadata does not update. Max is 1440 (1 Day)."
				},
				"launchdarkly.refreshRate.codeRefs": {
					"type": "number",
					"default": 240,
					"description": "How often in minutes to refresh feature flag metadata via API. If `0` code references does not update. Max is 1440 (1 Day)."
				},
				"launchdarkly.enableAliases": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable reading in flag aliases via [Code References](https://docs.launchdarkly.com/integrations/code-references). As of v3 of this extension, Code References is bundled with this extension."
				},
				"launchdarkly.enableCodeLens": {
					"type": "boolean",
					"default": false,
					"description": "Control whether flag data is inlined when a reference is found in a file."
				},
				"launchdarkly.enableFlagsInFile": {
					"type": "boolean",
					"default": true,
					"description": "LaunchDarkly Flags in File"
				},
				"launchdarkly.enableReleasesView": {
					"type": "boolean",
					"default": false,
					"description": "Experimental LaunchDarkly Releases View"
				},
				"launchdarkly.debugLogging": {
					"type": "boolean",
					"default": false,
					"description": "Enable Debug Logging"
				},
				"launchdarkly.enableStatusBar": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable the LaunchDarkly status bar. This will show the current project and environment."
				},
				"launchdarkly.streamUri": {
					"type": "string",
					"default": "https://stream.launchdarkly.com",
					"markdownDescription": "LaunchDarkly stream URI. Change only if you are using the Relay Proxy. [More information](https://docs.launchdarkly.com/home/advanced/relay-proxy/using)"
				}
			}
		},
		"commands": [
			{
				"command": "launchdarkly.openInLaunchDarkly",
				"title": "LaunchDarkly: Open in LaunchDarkly",
				"when": "LDFlagToggle"
			},
			{
				"command": "launchdarkly.toggleFlagContext",
				"title": "LaunchDarkly: Toggle Flag",
				"when": "LDFlagToggle"
			},
			{
				"command": "launchdarkly.toggleFlagCmdPrompt",
				"title": "LaunchDarkly: Toggle Flag"
			},
			{
				"command": "launchdarkly.OpenFlag",
				"title": "Jump to line in file",
				"icon": {
					"light": "resources/light/flagMultipleSearch.svg",
					"dark": "resources/dark/flagMultipleSearch.svg"
				}
			},
			{
				"command": "extension.configureLaunchDarkly",
				"title": "LaunchDarkly: Configure settings",
				"icon": {
					"light": "resources/light/settings.svg",
					"dark": "resources/dark/settings.svg"
				}
			},
			{
				"command": "launchdarkly.migrateConfiguration",
				"title": "LaunchDarkly: Migrate Configuration"
			},
			{
				"command": "launchdarkly.configureLaunchDarklyEnvironment",
				"title": "LaunchDarkly: Configure Environment",
				"icon": {
					"light": "resources/light/settings.svg",
					"dark": "resources/dark/settings.svg"
				}
			},
			{
				"command": "launchdarkly.refreshEntry",
				"title": "Refresh feature flags",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "launchdarkly.refreshFlagLens",
				"title": "Refresh flags in file",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"command": "launchdarkly.copyKey",
				"title": "Copy flag key",
				"icon": {
					"light": "resources/light/clippy.svg",
					"dark": "resources/dark/clippy.svg"
				}
			},
			{
				"command": "launchdarkly.toggleFlag",
				"title": "Toggle Flag"
			},
			{
				"command": "launchdarkly.createFlag",
				"title": "LaunchDarkly: Create New Boolean Flag"
			},
			{
				"command": "launchdarkly.fallthroughChange",
				"title": "Change Fallthrough Variation"
			},
			{
				"command": "launchdarkly.offChange",
				"title": "Change Off Variation"
			},
			{
				"command": "launchdarkly.treeviewrefresh",
				"title": "Toggle treeview"
			},
			{
				"command": "launchdarkly.enableWorkspace",
				"title": "LaunchDarkly: Enable Workspace",
				"when": "workspaceState.isDisabledForWorkspace == true"
			},
			{
				"command": "launchdarkly.openBrowser",
				"title": "Open in LaunchDarkly",
				"icon": {
					"light": "resources/light/link-external.svg",
					"dark": "resources/dark/link-external.svg"
				}
			},
			{
				"command": "launchdarkly.flagMultipleSearch",
				"title": "Search Flag References",
				"icon": {
					"light": "resources/light/flagMultipleSearch.svg",
					"dark": "resources/dark/flagMultipleSearch.svg"
				}
			},
			{
				"command": "launchdarkly.metricMultipleSearch",
				"title": "Search Metric References",
				"icon": {
					"light": "resources/light/flagMultipleSearch.svg",
					"dark": "resources/dark/flagMultipleSearch.svg"
				}
			},
			{
				"command": "launchdarkly.enableCodeLens",
				"title": "Toggle LaunchDarkly CodeLens"
			},
			{
				"command": "launchdarkly.quickPickRules",
				"title": "LaunchDarkly: Quick Targeting"
			},
			{
				"command": "vscode-launchdarkly-authprovider.signIn",
				"title": "Sign in",
				"category": "LaunchDarkly",
				"icon": "$(sign-in)",
				"when": false
			},
			{
				"command": "launchdarkly.setMaintainer",
				"title": "LaunchDarkly: Set Maintainer"
			},
			{
				"command": "launchdarkly.setGlobalDefaults",
				"title": "LaunchDarkly: Set Global Default"
			},
			{
				"command": "launchdarkly.clearGlobalContext",
				"title": "LaunchDarkly: Clear Global Context",
				"when": "config.launchdarkly.globalDefault == 'off'"
			},
			{
				"command": "launchdarkly.quickFlag",
				"title": "LaunchDarkly: Flag Actions"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "launchdarkly.copyKey",
					"when": "false"
				},
				{
					"command": "launchdarkly.openBrowser",
					"when": "false"
				},
				{
					"command": "launchdarkly.refreshEntry",
					"when": "false"
				},
				{
					"command": "launchdarkly.refreshFlagLens",
					"when": "false"
				},
				{
					"command": "launchdarkly.treeviewrefresh",
					"when": "false"
				},
				{
					"command": "launchdarkly.flagMultipleSearch",
					"when": "false"
				},
				{
					"command": "launchdarkly.metricMultipleSearch",
					"when": "false"
				},
				{
					"command": "launchdarkly.OpenFlag",
					"when": "false"
				},
				{
					"command": "launchdarkly.toggleFlag",
					"when": "false"
				},
				{
					"command": "launchdarkly.toggleFlagContext",
					"when": "false"
				},
				{
					"command": "launchdarkly.openInLaunchDarkly",
					"when": "false"
				},
				{
					"command": "launchdarkly.migrateConfiguration",
					"when": "false"
				},
				{
					"command": "launchdarkly.enableCodeLens",
					"when": "false"
				},
				{
					"command": "launchdarkly.setMaintainer",
					"when": "false"
				}
			],
			"editor/context": [
				{
					"command": "launchdarkly.openInLaunchDarkly",
					"when": "LDFlagToggle",
					"group": "LaunchDarkly"
				},
				{
					"command": "launchdarkly.toggleFlagContext",
					"args": "${LDFlagToggle}",
					"when": "LDFlagToggle",
					"group": "LaunchDarkly@1"
				}
			],
			"view/title": [
				{
					"command": "launchdarkly.refreshEntry",
					"when": "view == launchdarklyFeatureFlags",
					"group": "navigation"
				},
				{
					"command": "launchdarkly.refreshFlagLens",
					"when": "view == launchdarklyFlagList",
					"group": "navigation"
				},
				{
					"command": "launchdarkly.configureLaunchDarklyEnvironment",
					"when": "view == launchdarklyFeatureFlags",
					"group": "navigation"
				}
			],
			"view/item/context": [
				{
					"command": "launchdarkly.copyKey",
					"when": "viewItem == flagParentItem || viewItem == flagInFile",
					"group": "inline"
				},
				{
					"command": "launchdarkly.openBrowser",
					"when": "viewItem == flagParentItem || viewItem == flagInFile",
					"group": "inline"
				},
				{
					"command": "launchdarkly.flagMultipleSearch",
					"when": "viewItem == flagParentItem || viewItem == flagInFile",
					"group": "inline"
				},
				{
					"command": "launchdarkly.flagMultipleSearch",
					"when": "view == launchdarklyReleases && viewItem == releaseFlag",
					"group": "inline"
				},
				{
					"command": "launchdarkly.toggleFlag",
					"when": "viewItem == flagParentItem || viewItem == flagInFile"
				},
				{
					"command": "launchdarkly.fallthroughChange",
					"when": "view == launchdarklyFeatureFlags && viewItem == variationDefault"
				},
				{
					"command": "launchdarkly.fallthroughChange",
					"when": "view == launchdarklyFeatureFlags && viewItem == rollout"
				},
				{
					"command": "launchdarkly.offChange",
					"when": "view == launchdarklyFeatureFlags && viewItem == variationOff"
				},
				{
					"command": "launchdarkly.fallthroughChange",
					"when": "view == launchdarklyFeatureFlags && viewItem == flagParentItem"
				},
				{
					"command": "launchdarkly.offChange",
					"when": "view == launchdarklyFeatureFlags && viewItem == flagParentItem"
				},
				{
					"command": "launchdarkly.OpenFlag",
					"when": "view == launchdarklyFlagList && viewItem == child",
					"group": "inline"
				},
				{
					"command": "launchdarkly.openBrowser",
					"when": "view == launchdarklyFeatureFlags && viewItem == flagViewBrowser",
					"group": "inline"
				}
			]
		},
		"keybindings": [
			{
				"command": "launchdarkly.openInLaunchDarkly",
				"key": "ctrl+alt+g",
				"mac": "cmd+alt+g",
				"when": "editorTextFocus"
			},
			{
				"command": "launchdarkly.toggleFlagCmdPrompt",
				"key": "ctrl+alt+t",
				"mac": "shift+cmd+t"
			},
			{
				"command": "launchdarkly.quickPickRules",
				"key": "ctrl+alt+q",
				"mac": "alt+cmd+q"
			}
		],
		"viewsContainers": {
			"activitybar": [
				{
					"id": "launchdarkly-explorer",
					"title": "LaunchDarkly",
					"icon": "resources/logo.svg"
				}
			]
		},
		"views": {
			"launchdarkly-explorer": [
				{
					"id": "launchdarklyQuickLinks",
					"name": "Quick Links"
				},
				{
					"id": "launchdarklyFlagList",
					"name": "Flags in File",
					"when": "config.launchdarkly.enableFlagsInFile"
				},
				{
					"id": "launchdarklyFeatureFlags",
					"name": "Feature Flags",
					"when": "config.launchdarkly.enableFlagExplorer"
				},
				{
					"id": "launchdarklyReleases",
					"name": "Releases",
					"when": "config.launchdarkly.enableReleasesView"
				}
			]
		},
		"viewsWelcome": [
			{
				"view": "launchdarklyFeatureFlags",
				"contents": "Use your global defaults\n[Click Here](command:launchdarkly.enableWorkspace)",
				"when": "config.launchdarkly.globalDefault !== 'off'"
			},
			{
				"view": "launchdarklyFeatureFlags",
				"contents": "In order to manage LaunchDarkly feature flags, you will need to configure this extension first.\n[Configure](command:extension.configureLaunchDarkly)\n[Read our docs](https://docs.launchdarkly.com/integrations/vscode) to learn more about how to use the LaunchDarkly extension. \nIf you had a previous version installed you may need to \n[Migrate Configuration](command:launchdarkly.migrateConfiguration)\n Previous versions allowed for global configuration, the current version is configured per workspace.",
				"when": "config.launchdarkly.globalDefault == 'off'"
			}
		]
	},
	"galleryBanner": {
		"color": "#282828",
		"theme": "dark"
	},
	"homepage": "https://docs.launchdarkly.com/integrations/vscode",
	"bugs": {
		"url": "https://github.com/launchdarkly/ld-vscode/issues"
	},
	"scripts": {
		"build:icons": "yarn icons:svgo && yarn fantasticon && yarn icons:apply",
		"vscode:prepublish": "webpack --mode production",
		"compile": "webpack --mode none",
		"watch": "webpack --mode none --watch",
		"pretest": "tsc -p ./ && cp ./package.json ./out/package.json",
		"test": "vscode-test",
		"icons:apply": "node ./scripts/applyIconsContribution.mjs",
		"icons:svgo": "svgo -q -f ./images/icons/ --config svgo.config.js",
		"lint": "npx eslint . --ext .ts",
		"lint:fix": "npx eslint . --fix --ext .ts",
		"prettier:write": "prettier --single-quote true --print-width 120 --use-tabs true --trailing-comma all --write \"{src,test}/**/*.ts\"",
		"prettier:check": "prettier --single-quote true --print-width 120 --use-tabs true --trailing-comma all --list-different \"{src,test}/**/*.ts\"",
		"prepare-beta": "node build/prepare-beta.js"
	},
	"devDependencies": {
		"@twbs/fantasticon": "2.7.2",
		"@types/mocha": "^10.0.6",
		"@types/node": "^18.3.0",
		"@types/vscode": "1.82.0",
		"@typescript-eslint/eslint-plugin": "6.14.0",
		"@typescript-eslint/parser": "6.14.0",
		"@vscode/test-cli": "^0.0.4",
		"@vscode/test-electron": "^2.3.8",
		"chai": "^4.3.10",
		"eslint": "8.55.0",
		"eslint-config-prettier": "9.1.0",
		"expect": "^26.1.0",
		"expect-mocha-snapshot": "2.1.5",
		"glob": "7.2.0",
		"mocha": "10.2.0",
		"mock-fs": "^5.2.0",
		"nyc": "^15.1.0",
		"prettier": "^3.1.1",
		"pretty-error": "^2.1.1",
		"proxyquire": "^2.1.3",
		"schema-utils": "4.2.0",
		"sinon": "^17.0.1",
		"ts-loader": "^8.2.0",
		"ts-mockito": "2.6.1",
		"typescript": "^5.3.3",
		"vscode-test": "^1.6.1",
		"webpack": "^5.35.1",
		"webpack-cli": "^4.6.0"
	},
	"dependencies": {
		"@launchdarkly/node-server-sdk": "^9.0.3",
		"@types/lodash": "4.14.116",
		"@types/opn": "5.1.0",
		"ajv": "^6.12.6",
		"axios": "0.21.4",
		"axios-retry": "4.0.0",
		"axios-retry-after": "2.0.0",
		"csv-parser": "^2.3.3",
		"form-data": "^4.0.0",
		"gunzip-maybe": "^1.4.2",
		"launchdarkly-api-typescript": "6.0.0",
		"lodash": "^4.17.21",
		"lodash.debounce": "4.0.8",
		"lodash.kebabcase": "4.1.1",
		"node-fetch": "^3.3.2",
		"opn": "5.3.0",
		"request": "^2.34",
		"rimraf": "^3.0.2",
		"tar-fs": "^2.1.1",
		"tree-sitter-stack-graphs": "^0.7.0",
		"uuid": "^9.0.1"
	},
	"resolutions": {
		"node.extend": "^1.1.7",
		"lodash": "^4.17.12"
	}
}
